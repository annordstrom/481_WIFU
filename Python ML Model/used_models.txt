fil#Fresh model generation

model_name = 'base_model_2'

model = Sequential()
# 1st Convolutional Layer
model.add(Conv2D(filters=256, input_shape=(150,30,12), kernel_size=(15,3), strides=(5,1), padding='valid'))
model.add(Activation('relu'))
# Max Pooling
model.add(MaxPooling2D(pool_size=(2,2), strides=(2,2), padding='valid'))
# 2nd Convolutional Layer
model.add(Conv2D(filters=512, kernel_size=(4,4), strides=(2,2), padding='valid'))
model.add(Activation('relu'))
# Passing it to a Fully Connected layer
model.add(Flatten())
# Fully Connected Layer
model.add(Dense(1000))
model.add(Activation('relu'))
# Add Dropout
model.add(Dropout(0.4))
# Output Layer
model.add(Dense(5))
model.add(Activation('softmax'))
model.compile(loss=keras.losses.categorical_crossentropy, optimizer='adam', metrics=['accuracy'])

# *** END MODEL
    

model_name = 'binary_2'
    
model = Sequential()
# 1st Convolutional Layer
model.add(Conv2D(filters=256, input_shape=(150,30,12), kernel_size=(15,3), strides=(5,1), padding='valid'))
model.add(Activation('sigmoid'))
model.add(Dropout(0.4))
model.add(Conv2D(filters=256, kernel_size=(4,4), strides=(1,1)))
model.add(Activation('sigmoid'))
model.add(Dropout(0.4))
model.add(Dense(1000, activation = 'sigmoid'))
model.add(Dropout(0.4))
model.add(Flatten())
model.add(Dense(1, activation = 'softmax'))
#    model.add(Activation('softmax'))
adam = optimizers.Adam(lr = 0.005)
#    sgd = keras.optimizers.SGD(lr = 0.1, momentum = 0.0, nesterov = False)

model.compile(loss=keras.losses.binary_crossentropy, optimizer=adam, metrics=['accuracy'])
# *** END MODEL
